// This client was generated by Platformatic from an OpenAPI specification.

import type { Backend } from './backend-types'
import type * as Types from './backend-types'

// The base URL for the API. This can be overridden by calling `setBaseUrl`.
let baseUrl = ''
// The default headers to send within each request. This can be overridden by calling `setDefaultHeaders`.
let defaultHeaders = {}
// The additional parameters you want to pass to the `fetch` instance.
let defaultFetchParams = {}
const defaultJsonType = { 'Content-type': 'application/json; charset=utf-8' }

function sanitizeUrl(url: string) : string {
  if (url.endsWith('/')) { return url.slice(0, -1) } else { return url }
}
export const setBaseUrl = (newUrl: string) : void => { baseUrl = sanitizeUrl(newUrl) }

export const setDefaultHeaders = (headers: object): void => { defaultHeaders = headers }

export const setDefaultFetchParams = (fetchParams: RequestInit): void => { defaultFetchParams = fetchParams }

type JSON = Record<string, unknown>
/* @ts-ignore - potential unused variable */
function headersToJSON(headers: Headers): JSON {
  const output: JSON = {}
  headers.forEach((value, key) => {
    output[key] = value
  })
  return output
}

const _getRuntimes = async (url: string, request: Types.GetRuntimesRequest): Promise<Types.GetRuntimesResponses> => {
  const queryParameters: (keyof NonNullable<Types.GetRuntimesRequest['query']>)[] = ['includeAdmin']
  const searchParams = new URLSearchParams()
  if (request.query) {
    queryParameters.forEach((qp) => {
      const queryValue = request.query?.[qp]
      if (queryValue) {
        if (Array.isArray(queryValue)) {
          queryValue.forEach((p) => searchParams.append(qp, p))
        } else {
          searchParams.append(qp, queryValue.toString())
        }
      }
      delete request.query?.[qp]
    })
  }

  const headers: HeadersInit = {
    ...defaultHeaders
  }

  const response = await fetch(`${url}/runtimes?${searchParams.toString()}`, {
    headers,
    ...defaultFetchParams
  })

  const jsonResponses = [200]
  if (jsonResponses.includes(response.status)) {
    return {
      statusCode: response.status as 200,
      headers: headersToJSON(response.headers),
      body: await response.json()
    }
  }
  const responseType = response.headers.get('content-type')?.startsWith('application/json') ? 'json' : 'text'
  return {
    statusCode: response.status as 200,
    headers: headersToJSON(response.headers),
    body: await response[responseType]()
  }
}

export const getRuntimes: Backend['getRuntimes'] = async (request: Types.GetRuntimesRequest): Promise<Types.GetRuntimesResponses> => {
  return await _getRuntimes(baseUrl, request)
}
const _getRuntimesPidMetrics = async (url: string, request: Types.GetRuntimesPidMetricsRequest): Promise<Types.GetRuntimesPidMetricsResponses> => {
  const headers: HeadersInit = {
    ...defaultHeaders
  }

  const response = await fetch(`${url}/runtimes/${request.path['pid']}/metrics`, {
    headers,
    ...defaultFetchParams
  })

  const jsonResponses = [200]
  if (jsonResponses.includes(response.status)) {
    return {
      statusCode: response.status as 200,
      headers: headersToJSON(response.headers),
      body: await response.json()
    }
  }
  const responseType = response.headers.get('content-type')?.startsWith('application/json') ? 'json' : 'text'
  return {
    statusCode: response.status as 200,
    headers: headersToJSON(response.headers),
    body: await response[responseType]()
  }
}

export const getRuntimesPidMetrics: Backend['getRuntimesPidMetrics'] = async (request: Types.GetRuntimesPidMetricsRequest): Promise<Types.GetRuntimesPidMetricsResponses> => {
  return await _getRuntimesPidMetrics(baseUrl, request)
}
const _getRuntimesPidMetricsServiceId = async (url: string, request: Types.GetRuntimesPidMetricsServiceIdRequest): Promise<Types.GetRuntimesPidMetricsServiceIdResponses> => {
  const headers: HeadersInit = {
    ...defaultHeaders
  }

  const response = await fetch(`${url}/runtimes/${request.path['pid']}/metrics/${request.path['serviceId']}`, {
    headers,
    ...defaultFetchParams
  })

  const jsonResponses = [200]
  if (jsonResponses.includes(response.status)) {
    return {
      statusCode: response.status as 200,
      headers: headersToJSON(response.headers),
      body: await response.json()
    }
  }
  const responseType = response.headers.get('content-type')?.startsWith('application/json') ? 'json' : 'text'
  return {
    statusCode: response.status as 200,
    headers: headersToJSON(response.headers),
    body: await response[responseType]()
  }
}

export const getRuntimesPidMetricsServiceId: Backend['getRuntimesPidMetricsServiceId'] = async (request: Types.GetRuntimesPidMetricsServiceIdRequest): Promise<Types.GetRuntimesPidMetricsServiceIdResponses> => {
  return await _getRuntimesPidMetricsServiceId(baseUrl, request)
}
const _getRuntimesPidServices = async (url: string, request: Types.GetRuntimesPidServicesRequest): Promise<Types.GetRuntimesPidServicesResponses> => {
  const headers: HeadersInit = {
    ...defaultHeaders
  }

  const response = await fetch(`${url}/runtimes/${request.path['pid']}/services`, {
    headers,
    ...defaultFetchParams
  })

  const jsonResponses = [200]
  if (jsonResponses.includes(response.status)) {
    return {
      statusCode: response.status as 200,
      headers: headersToJSON(response.headers),
      body: await response.json()
    }
  }
  const responseType = response.headers.get('content-type')?.startsWith('application/json') ? 'json' : 'text'
  return {
    statusCode: response.status as 200,
    headers: headersToJSON(response.headers),
    body: await response[responseType]()
  }
}

export const getRuntimesPidServices: Backend['getRuntimesPidServices'] = async (request: Types.GetRuntimesPidServicesRequest): Promise<Types.GetRuntimesPidServicesResponses> => {
  return await _getRuntimesPidServices(baseUrl, request)
}
const _getRuntimesPidLogs = async (url: string, request: Types.GetRuntimesPidLogsRequest): Promise<Types.GetRuntimesPidLogsResponses> => {
  const headers: HeadersInit = {
    ...defaultHeaders
  }

  const response = await fetch(`${url}/runtimes/${request.path['pid']}/logs`, {
    headers,
    ...defaultFetchParams
  })

  const textResponses = [200]
  if (textResponses.includes(response.status)) {
    return {
      statusCode: response.status as 200,
      headers: headersToJSON(response.headers),
      body: await response.text()
    }
  }
  const responseType = response.headers.get('content-type')?.startsWith('application/json') ? 'json' : 'text'
  return {
    statusCode: response.status as 200,
    headers: headersToJSON(response.headers),
    body: await response[responseType]()
  }
}

export const getRuntimesPidLogs: Backend['getRuntimesPidLogs'] = async (request: Types.GetRuntimesPidLogsRequest): Promise<Types.GetRuntimesPidLogsResponses> => {
  return await _getRuntimesPidLogs(baseUrl, request)
}
const _getRuntimesPidOpenapiServiceId = async (url: string, request: Types.GetRuntimesPidOpenapiServiceIdRequest): Promise<Types.GetRuntimesPidOpenapiServiceIdResponses> => {
  const headers: HeadersInit = {
    ...defaultHeaders
  }

  const response = await fetch(`${url}/runtimes/${request.path['pid']}/openapi/${request.path['serviceId']}`, {
    headers,
    ...defaultFetchParams
  })

  const textResponses = [200]
  if (textResponses.includes(response.status)) {
    return {
      statusCode: response.status as 200,
      headers: headersToJSON(response.headers),
      body: await response.text()
    }
  }
  const responseType = response.headers.get('content-type')?.startsWith('application/json') ? 'json' : 'text'
  return {
    statusCode: response.status as 200,
    headers: headersToJSON(response.headers),
    body: await response[responseType]()
  }
}

export const getRuntimesPidOpenapiServiceId: Backend['getRuntimesPidOpenapiServiceId'] = async (request: Types.GetRuntimesPidOpenapiServiceIdRequest): Promise<Types.GetRuntimesPidOpenapiServiceIdResponses> => {
  return await _getRuntimesPidOpenapiServiceId(baseUrl, request)
}
const _postRuntimesPidRestart = async (url: string, request: Types.PostRuntimesPidRestartRequest): Promise<Types.PostRuntimesPidRestartResponses> => {
  const body = 'body' in request ? (request.body) : undefined
  const isFormData = body instanceof FormData
  const headers: HeadersInit = {
    ...defaultHeaders,
    ...(isFormData ? {} : defaultJsonType)
  }

  const response = await fetch(`${url}/runtimes/${request.path['pid']}/restart`, {
    method: 'POST',
    body: isFormData ? body : JSON.stringify(body),
    headers,
    ...defaultFetchParams
  })

  const textResponses = [200]
  if (textResponses.includes(response.status)) {
    return {
      statusCode: response.status as 200,
      headers: headersToJSON(response.headers),
      body: await response.text()
    }
  }
  const responseType = response.headers.get('content-type')?.startsWith('application/json') ? 'json' : 'text'
  return {
    statusCode: response.status as 200,
    headers: headersToJSON(response.headers),
    body: await response[responseType]()
  }
}

export const postRuntimesPidRestart: Backend['postRuntimesPidRestart'] = async (request: Types.PostRuntimesPidRestartRequest): Promise<Types.PostRuntimesPidRestartResponses> => {
  return await _postRuntimesPidRestart(baseUrl, request)
}
type BuildOptions = {
  headers?: object
}
export default function build (url: string, options?: BuildOptions) {
  url = sanitizeUrl(url)
  if (options?.headers) {
    defaultHeaders = options.headers
  }
  return {
    getRuntimes: _getRuntimes.bind(url, ...arguments),
    getRuntimesPidMetrics: _getRuntimesPidMetrics.bind(url, ...arguments),
    getRuntimesPidMetricsServiceId: _getRuntimesPidMetricsServiceId.bind(url, ...arguments),
    getRuntimesPidServices: _getRuntimesPidServices.bind(url, ...arguments),
    getRuntimesPidLogs: _getRuntimesPidLogs.bind(url, ...arguments),
    getRuntimesPidOpenapiServiceId: _getRuntimesPidOpenapiServiceId.bind(url, ...arguments),
    postRuntimesPidRestart: _postRuntimesPidRestart.bind(url, ...arguments)
  }
}